@page "/"
@using TumorClassificationModel_Console
@using static Tensorflow.Summary.Types
@inject HttpClient client

<div>
    <label>Upload an image: </label>
    <br />
    <InputFile accept="image/*" OnChange="@OnInputChange"/>
    <button id="loadButton" class="btn btn-success" eve @onclick="@Load">Upload</button>
</div>


<div>
    @if (PredictedLabel != null)
    {
        <div class="card mb-2" style="width:20rem;">
            <div class="card-header">
                <img src="@ImagePath" class="card-img-top" height="250" width="250">
            </div>
            <div class="card-body">
                <h4>Predicted: <strong>@PredictedLabel</strong></h4>
                <p>Brain Tumor: @Math.Round(Score[0] * 100, 2) %</p>
                <p>Healthy Brain: @Math.Round(Score[1] * 100, 2) %</p>
            </div>
        </div>
    }
    else
    {
        <p>Waiting for input.</p>
    }
</div>


@code {
    private List<IBrowserFile> ImageUrls = new();
    private int maxAllowedFiles = 3;

    public string? ImagePath { get; set; }

    public string? PredictedLabel { get; set; }

    public float[]? Score { get; set; }

    private byte[]? imageBytes { get; set; }


    private async void OnInputChange(InputFileChangeEventArgs e)
    {
        var format = "image/*";
        ImageUrls.Clear();
        
        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {

            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            ImagePath = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            ImageUrls.Add(imageFile);
            MemoryStream stream = new MemoryStream();
            await imageFile.OpenReadStream().CopyToAsync(stream);
            imageBytes = stream.ToArray();
        }
    }

    private void Load()
    {
        var prediction = Predict();
        PredictedLabel = prediction.PredictedLabel;
        Score = prediction.Score;
    }

    private TumorClassificationModel.ModelOutput Predict()
    {
        TumorClassificationModel.ModelInput sampleData = new TumorClassificationModel.ModelInput()
            {
                ImageSource = imageBytes,
            };
        var predictionResult = TumorClassificationModel.Predict(sampleData);
        return predictionResult;
    }
}